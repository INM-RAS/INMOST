project(ADMFD)
set(SOURCE main.cpp)

add_executable(ADMFD ${SOURCE})

target_link_libraries(ADMFD inmost)

if(USE_SOLVER)
  if(USE_SOLVER_ANI)
    message("linking ADMFD with ani3d and BLAS")
    target_link_libraries(ADMFD ani3d ${BLAS_LIBRARIES})
    if(BLAS_LINKER_FLAGS)
      set_target_properties(ADMFD PROPERTIES LINK_FLAGS "${BLAS_LINKER_FLAGS}")
    endif()
  endif()
  if(USE_SOLVER_PETSC)
    message("linking ADMFD with PETSc")
    target_link_libraries(ADMFD ${PETSC_LIBRARIES})
  endif()
  if(USE_SOLVER_TRILINOS)
    message("linking ADMFD with Trilinos")
    target_link_libraries(ADMFD ${Trilinos_LIBRARIES} ${Trilinos_TPL_LIBRARIES})
  endif()
  if(USE_SOLVER_METIS)
    message("linking ADMFD with Metis")
    target_link_libraries(ADMFD ${METIS_LIBRARIES})
  endif()
  if(USE_SOLVER_MONDRIAAN)
    message("linking ADMFD with Mondriaan")
    target_link_libraries(ADMFD ${MONDRIAAN_LIBRARIES})
  endif()
  if(USE_SOLVER_SUPERLU)
    message("linking ADMFD with SuperLU")
    target_link_libraries(ADMFD ${SUPERLU_LIBRARIES})
  endif()
endif()


if(USE_PARTITIONER)
  if(USE_PARTITIONER_ZOLTAN)
    message("linking ADMFD with Zoltan")
    target_link_libraries(ADMFD ${ZOLTAN_LIBRARIES})
  endif()
  if(USE_PARTITIONER_PARMETIS)
    message("linking ADMFD with ParMETIS")
    target_link_libraries(ADMFD ${PARMETIS_LIBRARIES})
  endif()
endif()

if(USE_MPI)
  find_package(MPI)
  if(NOT MPI_FOUND)
    message("MPI NOT FOUND")
  else()
    message("linking ADMFD with MPI")
    target_link_libraries(ADMFD ${MPI_LIBRARIES})
    if(MPI_LINK_FLAGS)
      set_target_properties(ADMFD PROPERTIES LINK_FLAGS "${MPI_LINK_FLAGS}")
    endif()
  endif()
endif(USE_MPI)

install(TARGETS ADMFD EXPORT inmost-targets RUNTIME DESTINATION bin)
