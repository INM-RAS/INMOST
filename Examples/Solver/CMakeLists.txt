project(Solver)
set(SOURCE main.cpp)

add_executable(Solver ${SOURCE})

target_link_libraries(Solver inmost)

if(USE_SOLVER)
  if(USE_SOLVER_ANI)
    message("linking Solver with ani3d and BLAS")
    target_link_libraries(Solver ani3d ${BLAS_LIBRARIES})
    if(BLAS_LINKER_FLAGS)
      set_target_properties(Solver PROPERTIES LINK_FLAGS "${BLAS_LINKER_FLAGS}")
    endif()
  endif()
  if(USE_SOLVER_PETSC)
    message("linking Solver with PETSc")
    target_link_libraries(Solver ${PETSC_LIBRARIES})
  endif()
  if(USE_SOLVER_TRILINOS)
    message("linking Solver with Trilinos")
    target_link_libraries(Solver ${Trilinos_LIBRARIES} ${Trilinos_TPL_LIBRARIES})
  endif()
  if(USE_SOLVER_METIS)
    message("linking Solver with Metis")
    target_link_libraries(Solver ${METIS_LIBRARIES})
  endif()
  if(USE_SOLVER_MONDRIAAN)
    message("linking Solver with Mondriaan")
    target_link_libraries(Solver ${MONDRIAAN_LIBRARIES})
  endif()
  if(USE_SOLVER_SUPERLU)
    message("linking Solver with SuperLU")
    target_link_libraries(Solver ${SUPERLU_LIBRARIES})
  endif()
endif(USE_SOLVER)

if(USE_PARTITIONER)
  if(USE_PARTITIONER_ZOLTAN)
    message("linking Solver with Zoltan")
    target_link_libraries(Solver ${ZOLTAN_LIBRARIES})
  endif()
  if(USE_PARTITIONER_PARMETIS)
    message("linking Solver with ParMETIS")
    target_link_libraries(Solver ${PARMETIS_LIBRARIES})
  endif()
endif(USE_PARTITIONER)

if(USE_MPI)
  message("linking Solver with MPI")
  target_link_libraries(Solver ${MPI_LIBRARIES})
  if(MPI_LINK_FLAGS)
    set_target_properties(Solver PROPERTIES LINK_FLAGS "${MPI_LINK_FLAGS}")
  endif()
endif(USE_MPI)


install(TARGETS Solver EXPORT inmost-targets RUNTIME DESTINATION bin)
