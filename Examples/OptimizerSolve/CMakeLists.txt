project(OptimizerSolve)
set(SOURCE main.cpp series.cpp series.h)

add_executable(OptimizerSolve ${SOURCE})

target_link_libraries(OptimizerSolve inmost)

if(USE_MPI)
    message("linking OptimizerSolve with MPI")
    target_link_libraries(OptimizerSolve ${MPI_LIBRARIES})
    if(MPI_LINK_FLAGS)
        set_target_properties(OptimizerSolve PROPERTIES LINK_FLAGS "${MPI_LINK_FLAGS}")
    endif()
endif(USE_MPI)

if(USE_SOLVER)
    if(USE_SOLVER_ANI)
        message("linking OptimizerSolve with ani3d and BLAS")
        target_link_libraries(OptimizerSolve ani3d ${BLAS_LIBRARIES})
        if(BLAS_LINKER_FLAGS)
            set_target_properties(OptimizerSolve PROPERTIES LINK_FLAGS "${BLAS_LINKER_FLAGS}")
        endif()
    endif()
    if(USE_SOLVER_PETSC)
        message("linking OptimizerSolve with PETSc")
        target_link_libraries(OptimizerSolve ${PETSC_LIBRARIES})
    endif()
    if(USE_SOLVER_TRILINOS)
        message("linking OptimizerSolve with Trilinos")
        target_link_libraries(OptimizerSolve ${Trilinos_LIBRARIES} ${Trilinos_TPL_LIBRARIES})
    endif()
    if(USE_SOLVER_METIS)
        message("linking OptimizerSolve with Metis")
        target_link_libraries(OptimizerSolve ${METIS_LIBRARIES})
    endif()
    if(USE_SOLVER_MONDRIAAN)
        message("linking OptimizerSolve with Mondriaan")
        target_link_libraries(OptimizerSolve ${MONDRIAAN_LIBRARIES})
    endif()
    if(USE_SOLVER_SUPERLU)
        message("linking OptimizerSolve with SuperLU")
        target_link_libraries(OptimizerSolve ${SUPERLU_LIBRARIES})
    endif()
endif()


if(USE_PARTITIONER)
    if(USE_PARTITIONER_ZOLTAN)
        message("linking OptimizerSolve with Zoltan")
        target_link_libraries(OptimizerSolve ${ZOLTAN_LIBRARIES})
    endif()
    if(USE_PARTITIONER_PARMETIS)
        message("linking OptimizerSolve with ParMETIS")
        target_link_libraries(OptimizerSolve ${PARMETIS_LIBRARIES})
    endif()
endif()


install(TARGETS OptimizerSolve EXPORT inmost-targets RUNTIME DESTINATION bin)
